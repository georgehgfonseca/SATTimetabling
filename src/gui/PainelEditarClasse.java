package gui;

import java.net.URL;
import java.util.ArrayList;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


import org.prevayler.Prevayler;
import org.prevayler.TransactionWithQuery;

import de.preclipse.bo.*;



public class PainelEditarClasse extends JPanel {

	private static final long serialVersionUID = 1L;

	/** Creates new form PainelEditarClasse */
	public PainelEditarClasse(Prevayler prevayler) {
		this.prevayler = prevayler;
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		docenteItens = getDocenteItens();		
		cursoItens = getCursoItens();

		boxCurso = new JComboBox(cursoItens.toArray());
		boxCurso.setMaximumRowCount(cursoItens.size());

		boxDocente = new JComboBox(docenteItens.toArray());
		boxDocente.setMaximumRowCount(docenteItens.size());

		jPanel1 = new javax.swing.JPanel();
		labelTitulo = new javax.swing.JLabel();
		labelCodigo = new javax.swing.JLabel();
		labelNome = new javax.swing.JLabel();
		fieldNome = new javax.swing.JTextField();

		String pathFigure = "/gui/imagens/ajuda.png";
		URL url = this.getClass().getResource(pathFigure);
		Icon icone = new ImageIcon(url);
		buttonHelp = new JButton("",icone);
		buttonHelp.setContentAreaFilled(false);
		buttonHelp.setBorderPainted(false);

		buttonAlterar = new javax.swing.JButton();
		buttonRemover = new javax.swing.JButton();
		labelSelecione = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		tableListClasses = new javax.swing.JTable();
		buttonSelecionar = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		fieldCargaHoraria = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		fieldMinAulasGeminadas = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		fieldLimDiarioAulas = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		fieldNumAlunos = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		fieldCodigo = new javax.swing.JTextField();
		labelTitulo.setFont(new java.awt.Font("Dialog", 0, 24));
		labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelTitulo.setText("Editar Classe");

		labelCodigo.setText("Codigo");

		labelNome.setText("Nome");

		buttonHelp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonHelpActionPerformed(evt);
			}
		});

		buttonAlterar.setText("Alterar");
		buttonAlterar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonAlterarActionPerformed(evt);
			}
		});

		buttonRemover.setText("Remover");
		buttonRemover.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonRemoverActionPerformed(evt);
			}
		});

		labelSelecione.setText("Selecione");

		tableListClasses.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null},
						{null, null, null, null}
				},
				new String [] {
						"Código", "Nome", "Curso", "Docente"
				}
		) {
			private static final long serialVersionUID = 1L;
			Class[] types = new Class [] {
					java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
			};
			boolean[] canEdit = new boolean [] {
					false, false, false, false
			};

			public Class getColumnClass(int columnIndex) {
				return types [columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}
		});
		jScrollPane2.setViewportView(tableListClasses);

		buttonSelecionar.setText("Selecionar");
		buttonSelecionar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonSelecionarActionPerformed(evt);
			}
		});

		jLabel1.setText("Curso");

		jLabel2.setText("Carga Horária");

		jLabel3.setText("Mínimo de Aulas Geminadas");

		jLabel4.setText("Limite Diário de Aulas");

		jLabel5.setText("Número de Alunos");

		jLabel6.setText("Docente Responsável");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
												.addComponent(labelSelecione)
												.addGap(18, 18, 18)
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																.addGap(10, 10, 10)
																.addComponent(buttonSelecionar)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 365, Short.MAX_VALUE))
																.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
																.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																		.addComponent(buttonAlterar)
																		.addGap(18, 18, 18)
																		.addComponent(buttonRemover)
																		.addGap(109, 109, 109)
																		.addComponent(buttonHelp)))
																		.addContainerGap())
																		.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																				.addComponent(labelTitulo)
																				.addGap(178, 178, 178)))
																				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																								.addComponent(labelNome)
																								.addComponent(jLabel1)
																								.addComponent(jLabel2)
																								.addComponent(jLabel3)
																								.addComponent(jLabel4)
																								.addComponent(jLabel5)
																								.addComponent(jLabel6)
																								.addComponent(labelCodigo))
																								.addGap(18, 18, 18)
																								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																										.addComponent(boxDocente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																										.addComponent(fieldCodigo)
																										.addComponent(fieldNome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
																										.addComponent(boxCurso, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																										.addComponent(fieldCargaHoraria)
																										.addComponent(fieldMinAulasGeminadas)
																										.addComponent(fieldLimDiarioAulas)
																										.addComponent(fieldNumAlunos))
																										.addContainerGap())))
		);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(labelTitulo)
						.addGap(17, 17, 17)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(buttonSelecionar))
										.addComponent(labelSelecione))
										.addGap(4, 4, 4)
										.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(labelCodigo)
												.addComponent(fieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(18, 18, 18)
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(labelNome))
														.addGap(18, 18, 18)
														.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jLabel1)
																.addComponent(boxCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGap(18, 18, 18)
																.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(jLabel2)
																		.addComponent(fieldCargaHoraria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGap(18, 18, 18)
																		.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(jLabel3)
																				.addComponent(fieldMinAulasGeminadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addGap(18, 18, 18)
																				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(jLabel4)
																						.addComponent(fieldLimDiarioAulas, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGap(18, 18, 18)
																						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																								.addComponent(jLabel5)
																								.addComponent(fieldNumAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
																								.addGap(18, 18, 18)
																								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																										.addComponent(jLabel6)
																										.addComponent(boxDocente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
																										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																										.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																												.addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
																												.addComponent(buttonAlterar)
																												.addComponent(buttonRemover))
																												.addContainerGap())
		);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 531, Short.MAX_VALUE)
				.addGap(0, 531, Short.MAX_VALUE)
				.addGap(0, 531, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(0, 0, Short.MAX_VALUE)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE)))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 544, Short.MAX_VALUE)
				.addGap(0, 544, Short.MAX_VALUE)
				.addGap(0, 544, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(0, 0, Short.MAX_VALUE)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE)))
		);
		setTableClasses();
		fieldCodigo.setEditable(false);
	}// </editor-fold>

	private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {
		JanelaAjuda ajuda = new JanelaAjuda("Ajuda - Operação Editar Classe", 
        		"-------------------------------------------------------------------------------------\n" +
        		"                              Operação Editar Classe                                 \n" +
        		"-------------------------------------------------------------------------------------\n" +
        		"1. Selecione um dos registros de classe na tabela na parte superior do painel.       \n" +
        		"2. Clique no botão selecionar e irão ser exibidas as informações da classe.          \n" +
        		"3. Edite os campos caso deseje alterar o registro.                                   \n" +
        		"4. Clique no botão alterar ou no botão remover para finalizar a operação.            \n" +
        		"-------------------------------------------------------------------------------------\n" +
        		"Obs.: Os campos Carga Horária, Mínimo de Aulas Geminadas, Limite Diário de Aulas e   \n" +
        		"      Número de Alunos devem ser preenchidos com números inteiros não negativos.     \n" +
        		"      O valor Mínimo de Aulas Geminadas deve ser no máximo a metade da Carga Horária \n" +
        		"      da classe; caso contrário, leva a um horário impossível de gerar.              \n" +
        		"      Caso o Mínimo de Aulas Geminadas seja maior que 0, o limite diário de aulas de-\n" +
        		"      ve ser no mínimo 2 aulas.                                                      \n" +
        		"      O limite diário de aulas não pode exceder a 5 aulas.                           \n" +
        		"-------------------------------------------------------------------------------------\n");
        ajuda.setVisible(true);
	}

	private void buttonAlterarActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			if(validaEntrada()) {
				prevayler.execute(makeClasseChargeTransaction());
				informationMessage("Classe alterada com sucesso.");
				setTableClasses();
				cleanScreen();
			}
		} 
		catch(NumberFormatException exception) {
			errorMessage("Deve ser informado valores inteiros para carga horária, \nmínimo de aulas geminadas, limite diário de aulas e número de alunos.");
		}	
		catch (Exception e) {
			e.printStackTrace();
		}			
	}

	private void buttonRemoverActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			prevayler.execute(makeClasseRemoveTransaction());
			informationMessage("Classe removida com sucesso.");
			setTableClasses();
			cleanScreen();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void buttonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			Classe temp = (Classe) prevayler.execute(new ClasseConsultaPorCodigoTransaction(getSelectedCodigo()));
			if(temp == null)
				JOptionPane.showMessageDialog(PainelEditarClasse.this, "O código informado não existe!", "Atenção", JOptionPane.WARNING_MESSAGE);
			else {
				fieldCodigo.setText("" + temp.getCodigo());
				fieldNome.setText(temp.getNome());
				boxCurso.setSelectedItem(setCursoItem(getCurso(temp.getCurso())));
				fieldCargaHoraria.setText("" + temp.getCargaHoraria());
				fieldMinAulasGeminadas.setText("" + temp.getMinAulasGeminadas());
				fieldLimDiarioAulas.setText("" + temp.getLimiteDiarioAulas());
				fieldNumAlunos.setText("" + temp.getNumAlunos());
				boxDocente.setSelectedItem(setDocenteItem(getDocente(Integer.parseInt(temp.getSiapeDocente()))));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private int getSelectedCodigo() {
		return Integer.parseInt((String) tableListClasses.getModel().getValueAt(tableListClasses.getSelectedRow(), 0));
	}


	// Variables declaration - do not modify
	private javax.swing.JComboBox boxCurso;
	private javax.swing.JComboBox boxDocente;
	private javax.swing.JButton buttonAlterar;
	private javax.swing.JButton buttonHelp;
	private javax.swing.JButton buttonRemover;
	private javax.swing.JButton buttonSelecionar;
	private javax.swing.JTextField fieldCargaHoraria;
	private javax.swing.JTextField fieldCodigo;
	private javax.swing.JTextField fieldMinAulasGeminadas;
	private javax.swing.JTextField fieldNome;
	private javax.swing.JTextField fieldLimDiarioAulas;
	private javax.swing.JTextField fieldNumAlunos;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JLabel labelCodigo;
	private javax.swing.JLabel labelNome;
	private javax.swing.JLabel labelSelecione;
	private javax.swing.JLabel labelTitulo;
	private javax.swing.JTable tableListClasses;
	// End of variables declaration

	private Prevayler prevayler;
	private ArrayList<String> docenteItens;
	private ArrayList<String> cursoItens;

	private boolean validaEntrada() throws NumberFormatException {
		if(Integer.parseInt(fieldCodigo.getText().trim()) < 0) {
			errorMessage("O código da classe não pode ser negativo.");
			return false;
		}
		if((((String) boxDocente.getSelectedItem())).equals("Selecione")) {
			errorMessage("Deve-se selecionar o docente responsável pela classe.");
			return false;
		}
		if((((String) boxCurso.getSelectedItem())).equals("Selecione")) {
			errorMessage("Deve-se selecionar o curso ao qual a classe pertence.");
			return false;
		}
		if(Integer.parseInt(fieldCargaHoraria.getText().trim()) > 25 || Integer.parseInt(fieldCargaHoraria.getText().trim()) < 1) {
			errorMessage("A carga horária da classe deve ser no mínimo 1 e no máximo 25 horas-aula.");
			return false;
		}
		if(Integer.parseInt(fieldCargaHoraria.getText().trim()) < 2 * Integer.parseInt(fieldMinAulasGeminadas.getText().trim())) {
			errorMessage("O número mínimo de aulas geminadas deve ser no máximo igual à metade da carga horária.");
			return false;
		}
		if(Integer.parseInt(fieldLimDiarioAulas.getText().trim()) > 5 || Integer.parseInt(fieldLimDiarioAulas.getText().trim()) < 0) {
			errorMessage("O limite diário de aulas não pode ser negativo, nem maior que 5.");
			return false;
		}
		if(Integer.parseInt(fieldLimDiarioAulas.getText().trim()) < 2 && Integer.parseInt(fieldMinAulasGeminadas.getText().trim()) > 0) {
			errorMessage("É impossível haver aulas geminadas com o limite diário de aulas menor que 2.");
			return false;
		}
		if(Integer.parseInt(fieldNumAlunos.getText().trim()) < 0) {
			errorMessage("O número de alunos não pode ser negativo.");
			return false;
		}
		if(Integer.parseInt(fieldMinAulasGeminadas.getText().trim()) < 0) {
			errorMessage("O mínimo de aulas geminadas não pode ser negativo.");
			return false;
		}
		return true;
	}

	private void setTableClasses() {
		for(int i = 0; i < ((DefaultTableModel) tableListClasses.getModel()).getRowCount();) {
			((DefaultTableModel) tableListClasses.getModel()).removeRow(i);
		}
		String[]lin = new String[4];
		ArrayList<Classe> classes = ((ArrayList<Classe>)((PrevalentSystem)prevayler.prevalentSystem()).getClasse());			
		for(int i = 0; i < classes.size(); ++i) {
			try {
				Curso c = (Curso) prevayler.execute(new CursoConsultaPorCodigoTransaction(classes.get(i).getCurso()));
				Docente d = (Docente) prevayler.execute(new DocenteConsultaPorSiapeTransaction(Integer.parseInt(classes.get(i).getSiapeDocente())));
				lin[0]= "" + classes.get(i).getCodigo();
				lin[1]= "" + classes.get(i).getNome();
				lin[2]= "" + c.getNome();
				lin[3]= "" + d.getNome();
				((DefaultTableModel) tableListClasses.getModel()).addRow(lin);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
	}

	public TransactionWithQuery makeClasseChargeTransaction() {
		return (TransactionWithQuery) new ClasseChargeTransaction(Integer.parseInt(fieldCodigo.getText().trim()),
				fieldNome.getText().trim(),
				Integer.parseInt(boxCurso.getSelectedItem().toString().substring(0, boxCurso.getSelectedItem().toString().indexOf(" - "))),
				Integer.parseInt(fieldCargaHoraria.getText().trim()),
				Integer.parseInt(fieldMinAulasGeminadas.getText().trim()),
				Integer.parseInt(fieldLimDiarioAulas.getText().trim()),
				Integer.parseInt(fieldNumAlunos.getText().trim()),
				boxDocente.getSelectedItem().toString().substring(0, boxDocente.getSelectedItem().toString().indexOf(" - ")),
				new ArrayList<Restricao>());
	}

	public TransactionWithQuery makeClasseRemoveTransaction() {
		return (TransactionWithQuery) new ClasseRemoveTransaction(Integer.parseInt(fieldCodigo.getText().trim()));
	}

	public void cleanScreen() {
		fieldCodigo.setText("");
		fieldNome.setText("");
		boxCurso.setSelectedIndex(0);
		fieldCargaHoraria.setText("");
		fieldMinAulasGeminadas.setText("");
		fieldLimDiarioAulas.setText("");
		fieldNumAlunos.setText("");
		boxDocente.setSelectedIndex(0);
	}


	public ArrayList<String> getDocenteItens() {
		ArrayList<String> listSiapes = new ArrayList<String>();
		ArrayList<Docente> list = ((ArrayList<Docente>)((PrevalentSystem)prevayler.prevalentSystem()).getDocente());
		int i = 0;
		listSiapes.add("Selecione");
		if(list != null) {
			while(i < list.size()) {
				listSiapes.add("" + list.get(i).getSiape() + " - " + list.get(i).getNome());
				++i;
			}
		}
		return listSiapes;
	}

	public ArrayList<String> getCursoItens() {
		ArrayList<String> cursoItens = new ArrayList<String>();
		cursoItens.add("Selecione");
		ArrayList<Curso> list = ((ArrayList<Curso>)((PrevalentSystem)prevayler.prevalentSystem()).getCurso());
		for(int i = 0; i < list.size(); ++i) {
			cursoItens.add(list.get(i).getCodigo() + " - " + list.get(i).getNome());
		}
		return cursoItens;
	}

	private String setDocenteItem(Docente docente) {
		return "" + docente.getSiape() + " - " + docente.getNome();
	}

	private String setCursoItem(Curso curso) {
		return "" + curso.getCodigo() + " - " + curso.getNome();
	}

	private Docente getDocente(int siape) throws Exception {
		return (Docente) prevayler.execute(new DocenteConsultaPorSiapeTransaction(siape));
	}

	private Curso getCurso(int codigo) throws Exception {
		return (Curso) prevayler.execute(new CursoConsultaPorCodigoTransaction(codigo));
	}

	private void informationMessage(String s) {
		message(s, "Ok!", JOptionPane.INFORMATION_MESSAGE);
	}

	private void message(String s, String title, int type) {
		JOptionPane.showMessageDialog(PainelEditarClasse.this, s, title, type);
	}

	private void errorMessage(String s) {
		message(s, "Erro!", JOptionPane.ERROR_MESSAGE);
	}

}