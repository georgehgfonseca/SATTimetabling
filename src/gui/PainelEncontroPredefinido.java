package gui;

import javax.swing.JPanel;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import java.net.URL;
import java.util.ArrayList;


import org.prevayler.Prevayler;
import org.prevayler.TransactionWithQuery;

import de.preclipse.bo.*;



public class PainelEncontroPredefinido extends JPanel {

	private static final long serialVersionUID = 1L;

	public PainelEncontroPredefinido(final Prevayler prevayler) {
		this.prevayler = prevayler;
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		docenteItens = getDocenteItens();		
		classeItens = getClasseItens();

		boxClasse = new JComboBox(classeItens.toArray());
		boxClasse.setMaximumRowCount(classeItens.size());

		boxDocente = new JComboBox(docenteItens.toArray());
		boxDocente.setMaximumRowCount(docenteItens.size());

		jPanel1 = new javax.swing.JPanel();
		labelTitulo = new javax.swing.JLabel();
		labelCodigo = new javax.swing.JLabel();
		labelNome = new javax.swing.JLabel();
		labelRestricoes = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tableRestricoes = new TabelaRestricoes();

		String pathFigure = "/gui/imagens/ajuda.png";
		URL url = this.getClass().getResource(pathFigure);
		Icon icone = new ImageIcon(url);
		buttonHelp = new JButton("",icone);
		buttonHelp.setContentAreaFilled(false);
		buttonHelp.setBorderPainted(false);

		buttonDefinir = new javax.swing.JButton();
		buttonLimpar = new javax.swing.JButton();

		setPreferredSize(new java.awt.Dimension(531, 544));

		labelTitulo.setFont(new java.awt.Font("Dialog", 0, 24));
		labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labelTitulo.setText("Predefinir Encontros");

		labelCodigo.setText("Docente");

		labelNome.setText("Classe");

		labelRestricoes.setText("Selecione os Horários");

		jScrollPane1.setViewportView(tableRestricoes);

		buttonHelp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonHelpActionPerformed(evt);
			}
		});

		buttonDefinir.setText("Definir");
		buttonDefinir.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonDefinirActionPerformed(evt);
			}
		});

		buttonLimpar.setText("Limpar");
		buttonLimpar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonLimparActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addContainerGap()
												.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
												.addComponent(buttonHelp)
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
														.addGap(174, 174, 174)
														.addComponent(labelTitulo))
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addGap(131, 131, 131)
																.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																		.addComponent(labelCodigo)
																		.addComponent(labelNome)
																		.addComponent(labelRestricoes))
																		.addGap(18, 18, 18)
																		.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(boxClasse, 0, 270, Short.MAX_VALUE)
																				.addComponent(boxDocente, 0, 270, Short.MAX_VALUE))))
																				.addGroup(jPanel1Layout.createSequentialGroup()
																						.addGap(191, 191, 191)
																						.addComponent(buttonDefinir)
																						.addGap(18, 18, 18)
																						.addComponent(buttonLimpar)))
																						.addContainerGap())
		);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(labelTitulo)
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(labelCodigo)
								.addComponent(boxDocente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(labelNome)
										.addComponent(boxClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addComponent(labelRestricoes)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(40, 40, 40)
										.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(buttonDefinir)
												.addComponent(buttonLimpar))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
												.addComponent(buttonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addContainerGap())
		);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 531, Short.MAX_VALUE)
				.addGap(0, 531, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(0, 0, Short.MAX_VALUE)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE)))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 544, Short.MAX_VALUE)
				.addGap(0, 544, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(0, 7, Short.MAX_VALUE)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 7, Short.MAX_VALUE)))
		);
	}// </editor-fold>

	private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {
		JanelaAjuda ajuda = new JanelaAjuda("Ajuda - Operação Predefinir Encontro", 
        		"-------------------------------------------------------------------------------------\n" +
        		"                          Operação Predefinir Encontro                               \n" +
        		"-------------------------------------------------------------------------------------\n" +
        		"1. Selecione o docente e a classe. A classe deve necessáriamente ter como docente    \n" +
        		"   responsável o docente selecionado.                                                \n" +
        		"2. Marque os horários a predefinir.                                                  \n" +
        		"3. Clique no botão definir.                                                          \n" +
        		"-------------------------------------------------------------------------------------\n" +
        		"Obs.: Essa operação assegura que ocorrerão aulas do docente selecionado para a classe\n" +
        		"      selecionada nos horários marcados.                                             \n" +
        		"      O número de horários marcados não deve exceder a carga horária da classe.      \n" +
        		"      Não se deve marcar encontros fora do turno do curso ao qual a classe pertence. \n" +
        		"-------------------------------------------------------------------------------------\n");
        ajuda.setVisible(true);
	}

	private void buttonDefinirActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			Classe classe = (Classe) prevayler.execute(new ClasseConsultaPorCodigoTransaction(Integer.parseInt(boxClasse.getSelectedItem().toString().substring(0, boxClasse.getSelectedItem().toString().indexOf(" - ")))));
			Docente docente = (Docente) prevayler.execute(new DocenteConsultaPorSiapeTransaction(Integer.parseInt(boxDocente.getSelectedItem().toString().substring(0, boxDocente.getSelectedItem().toString().indexOf(" - ")))));
			for(int i = 0; i < getRestricoesFromTable().size(); ++i) {
				if(validaEntrada(getRestricoesFromTable().get(i), docente, classe)) {
					prevayler.execute(makeCreatePreassignedMeetingTransaction(getRestricoesFromTable().get(i), docente, classe));
					informationMessage("Encontros Predefinidos com sucesso.");
					buttonLimparActionPerformed(evt);
				}
			}
		}
		catch(Exception exception) {
			exception.printStackTrace();
			System.exit(1);
		}	
	}

	private void buttonLimparActionPerformed(java.awt.event.ActionEvent evt) {
		boxDocente.setSelectedIndex(0);
		boxClasse.setSelectedIndex(0);
		cleanTabelaRestricoes();
	}


	// Variables declaration - do not modify
	private javax.swing.JComboBox boxClasse;
	private javax.swing.JComboBox boxDocente;
	private javax.swing.JButton buttonDefinir;
	private javax.swing.JButton buttonHelp;
	private javax.swing.JButton buttonLimpar;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel labelCodigo;
	private javax.swing.JLabel labelNome;
	private javax.swing.JLabel labelRestricoes;
	private javax.swing.JLabel labelTitulo;
	private TabelaRestricoes tableRestricoes;
	// End of variables declaration

	private Prevayler prevayler;
	private ArrayList<String> docenteItens;
	private ArrayList<String> classeItens;
	
	private boolean validaEntrada(Restricao r, Docente d, Classe c) throws Exception {
		ArrayList<EncontroPredefinido> listPredefinidos = ((ArrayList<EncontroPredefinido>)((PrevalentSystem)prevayler.prevalentSystem()).getEncontroPredefinido());
		int count = 0;
		for(int i = 0; i < listPredefinidos.size(); ++i) {			
			if(listPredefinidos.get(i).getDocente().equals(d) && listPredefinidos.get(i).getClasse().equals(c)) {
				++count;
			}
			if(count > c.getCargaHoraria()) {
				errorMessage("É impossível predefinir mais encontros do que a carga horária da disciplina.");
				return false;
			}
			if(listPredefinidos.get(i).getRestricao().equals(r) && listPredefinidos.get(i).getDocente().equals(d) && listPredefinidos.get(i).getClasse().equals(c)) {
				errorMessage("O encontro já foi predefinido.");
				return false;
			}
		}
		Curso temp = (Curso) prevayler.execute(new CursoConsultaPorCodigoTransaction(c.getCurso()));
		if(r.getTipo() < 6 && temp.getTurno() == 2 || r.getTipo() >= 6 && temp.getTurno() == 1) {
			errorMessage("É impossível predefinir encontro fora do turno do curso ao qual a disciplina pertence.");
			return false;
		}
		return true;
	}

	public ArrayList<String> getDocenteItens() {
		ArrayList<String> listSiapes = new ArrayList<String>();
		ArrayList<Docente> list = ((ArrayList<Docente>)((PrevalentSystem)prevayler.prevalentSystem()).getDocente());
		int i = 0;
		listSiapes.add("Selecione");
		if(list != null) {
			while(i < list.size()) {
				listSiapes.add("" + list.get(i).getSiape() + " - " + list.get(i).getNome());
				++i;
			}
		}
		return listSiapes;
	}

	public ArrayList<String> getClasseItens() {
		ArrayList<String> listClasses = new ArrayList<String>();
		ArrayList<Classe> list = ((ArrayList<Classe>)((PrevalentSystem)prevayler.prevalentSystem()).getClasse());
		int i = 0;
		listClasses.add("Selecione");
		if(list != null) {
			while(i < list.size()) {
				listClasses.add("" + list.get(i).getCodigo() + " - " + list.get(i).getNome());
				++i;
			}
		}
		return listClasses;
	}

	private TransactionWithQuery makeCreatePreassignedMeetingTransaction(Restricao restricao, Docente docente, Classe classe) throws NumberFormatException, Exception {
		return (TransactionWithQuery) new EncontroPredefinidoCreateTransaction(restricao, 
				docente,
				classe);
	}

	private ArrayList<Restricao> getRestricoesFromTable() {
		final int LINES = 10;
		final int COLS = 6;
		ArrayList<Restricao> restricoes = new ArrayList<Restricao>();
		for(int i = 0; i < LINES; i++) {
			for(int j = 1; j < COLS; j++){
				if(((Boolean) tableRestricoes.getModel().getValueAt(i, j)).booleanValue()) {
					restricoes.add(new Restricao(j + 1, i + 1));
				}
			}
		}
		return restricoes;
	}

	public void cleanTabelaRestricoes() {
		final int LINES = 10;
		final int COLS = 6;
		for(int i = 0; i < LINES; i++) {
			for(int j = 1; j < COLS; j++){
				tableRestricoes.getModel().setValueAt(false, i, j);
			}
		}
	}

	private void errorMessage(String s) {
		message(s, "Erro!", JOptionPane.ERROR_MESSAGE);
	}

	private void informationMessage(String s) {
		message(s, "Ok!", JOptionPane.INFORMATION_MESSAGE);
	}

	private void message(String s, String title, int type) {
		JOptionPane.showMessageDialog(PainelEncontroPredefinido.this, s, title, type);
	}

}